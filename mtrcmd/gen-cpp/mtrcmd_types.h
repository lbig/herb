/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mtrcmd_TYPES_H
#define mtrcmd_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _MTRcmdReq__isset {
  _MTRcmdReq__isset() : exdata(false) {}
  bool exdata;
} _MTRcmdReq__isset;

class MTRcmdReq {
 public:

  static const char* ascii_fingerprint; // = "31FBBEA1FC165CE500F2DE705C5C27CE";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xFB,0xBE,0xA1,0xFC,0x16,0x5C,0xE5,0x00,0xF2,0xDE,0x70,0x5C,0x5C,0x27,0xCE};

  MTRcmdReq() : cmd("") {
  }

  virtual ~MTRcmdReq() throw() {}

  std::string cmd;
  std::map<std::string, std::string>  exdata;

  _MTRcmdReq__isset __isset;

  void __set_cmd(const std::string& val) {
    cmd = val;
  }

  void __set_exdata(const std::map<std::string, std::string> & val) {
    exdata = val;
    __isset.exdata = true;
  }

  bool operator == (const MTRcmdReq & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (__isset.exdata != rhs.__isset.exdata)
      return false;
    else if (__isset.exdata && !(exdata == rhs.exdata))
      return false;
    return true;
  }
  bool operator != (const MTRcmdReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MTRcmdReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MTRcmdRes {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  MTRcmdRes() : status(0), error(""), info("") {
  }

  virtual ~MTRcmdRes() throw() {}

  int32_t status;
  std::string error;
  std::string info;

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_info(const std::string& val) {
    info = val;
  }

  bool operator == (const MTRcmdRes & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const MTRcmdRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MTRcmdRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
