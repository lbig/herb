/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MTRcmd_H
#define MTRcmd_H

#include <TProcessor.h>
#include "mtrcmd_types.h"



class MTRcmdIf {
 public:
  virtual ~MTRcmdIf() {}
  virtual void mtrcmd(MTRcmdRes& _return, const MTRcmdReq& query) = 0;
};

class MTRcmdIfFactory {
 public:
  typedef MTRcmdIf Handler;

  virtual ~MTRcmdIfFactory() {}

  virtual MTRcmdIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MTRcmdIf* /* handler */) = 0;
};

class MTRcmdIfSingletonFactory : virtual public MTRcmdIfFactory {
 public:
  MTRcmdIfSingletonFactory(const boost::shared_ptr<MTRcmdIf>& iface) : iface_(iface) {}
  virtual ~MTRcmdIfSingletonFactory() {}

  virtual MTRcmdIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MTRcmdIf* /* handler */) {}

 protected:
  boost::shared_ptr<MTRcmdIf> iface_;
};

class MTRcmdNull : virtual public MTRcmdIf {
 public:
  virtual ~MTRcmdNull() {}
  void mtrcmd(MTRcmdRes& /* _return */, const MTRcmdReq& /* query */) {
    return;
  }
};

typedef struct _MTRcmd_mtrcmd_args__isset {
  _MTRcmd_mtrcmd_args__isset() : query(false) {}
  bool query;
} _MTRcmd_mtrcmd_args__isset;

class MTRcmd_mtrcmd_args {
 public:

  MTRcmd_mtrcmd_args() {
  }

  virtual ~MTRcmd_mtrcmd_args() throw() {}

  MTRcmdReq query;

  _MTRcmd_mtrcmd_args__isset __isset;

  void __set_query(const MTRcmdReq& val) {
    query = val;
  }

  bool operator == (const MTRcmd_mtrcmd_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const MTRcmd_mtrcmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MTRcmd_mtrcmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MTRcmd_mtrcmd_pargs {
 public:


  virtual ~MTRcmd_mtrcmd_pargs() throw() {}

  const MTRcmdReq* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MTRcmd_mtrcmd_result__isset {
  _MTRcmd_mtrcmd_result__isset() : success(false) {}
  bool success;
} _MTRcmd_mtrcmd_result__isset;

class MTRcmd_mtrcmd_result {
 public:

  MTRcmd_mtrcmd_result() {
  }

  virtual ~MTRcmd_mtrcmd_result() throw() {}

  MTRcmdRes success;

  _MTRcmd_mtrcmd_result__isset __isset;

  void __set_success(const MTRcmdRes& val) {
    success = val;
  }

  bool operator == (const MTRcmd_mtrcmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MTRcmd_mtrcmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MTRcmd_mtrcmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MTRcmd_mtrcmd_presult__isset {
  _MTRcmd_mtrcmd_presult__isset() : success(false) {}
  bool success;
} _MTRcmd_mtrcmd_presult__isset;

class MTRcmd_mtrcmd_presult {
 public:


  virtual ~MTRcmd_mtrcmd_presult() throw() {}

  MTRcmdRes* success;

  _MTRcmd_mtrcmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MTRcmdClient : virtual public MTRcmdIf {
 public:
  MTRcmdClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MTRcmdClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void mtrcmd(MTRcmdRes& _return, const MTRcmdReq& query);
  void send_mtrcmd(const MTRcmdReq& query);
  void recv_mtrcmd(MTRcmdRes& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MTRcmdProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MTRcmdIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MTRcmdProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_mtrcmd(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MTRcmdProcessor(boost::shared_ptr<MTRcmdIf> iface) :
    iface_(iface) {
    processMap_["mtrcmd"] = &MTRcmdProcessor::process_mtrcmd;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MTRcmdProcessor() {}
};

class MTRcmdProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MTRcmdProcessorFactory(const ::boost::shared_ptr< MTRcmdIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MTRcmdIfFactory > handlerFactory_;
};

class MTRcmdMultiface : virtual public MTRcmdIf {
 public:
  MTRcmdMultiface(std::vector<boost::shared_ptr<MTRcmdIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MTRcmdMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MTRcmdIf> > ifaces_;
  MTRcmdMultiface() {}
  void add(boost::shared_ptr<MTRcmdIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void mtrcmd(MTRcmdRes& _return, const MTRcmdReq& query) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->mtrcmd(_return, query);
        return;
      } else {
        ifaces_[i]->mtrcmd(_return, query);
      }
    }
  }

};



#endif
